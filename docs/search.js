window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "causal_nest", "modulename": "causal_nest", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.benchmark", "modulename": "causal_nest.benchmark", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.benchmark.ModelBenchmark", "modulename": "causal_nest.benchmark", "qualname": "ModelBenchmark", "kind": "class", "doc": "<p>Class to store and display the results of a model benchmarking process.</p>\n\n<p>This class is designed to encapsulate the results of a model benchmarking process, providing\na structured way to store and access various attributes related to the benchmarking. It is\nintended to be used in workflows where the performance of different models needs to be\ncompared, stored, or analyzed further.</p>\n\n<p>Attributes:\n    # stats (BenchmarkStats): The statistics of the benchmark.\n    model_name (str): The name of the model being benchmarked.\n    out_graph (DiGraph): The output graph generated by the model.</p>\n"}, {"fullname": "causal_nest.benchmark.ModelBenchmark.__init__", "modulename": "causal_nest.benchmark", "qualname": "ModelBenchmark.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">out_graph</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span></span>)</span>"}, {"fullname": "causal_nest.benchmark.ModelBenchmark.model_name", "modulename": "causal_nest.benchmark", "qualname": "ModelBenchmark.model_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "causal_nest.benchmark.ModelBenchmark.out_graph", "modulename": "causal_nest.benchmark", "qualname": "ModelBenchmark.out_graph", "kind": "variable", "doc": "<p></p>\n", "annotation": ": networkx.classes.digraph.DiGraph"}, {"fullname": "causal_nest.dataset", "modulename": "causal_nest.dataset", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.dataset.FeatureType", "modulename": "causal_nest.dataset", "qualname": "FeatureType", "kind": "class", "doc": "<p>The macro type for a feature in the dataset. Although a columnhas its primitive type (int, float, etc) it does not\nprovide enough info if it's discrete or continuous, for example.</p>\n", "bases": "enum.Enum"}, {"fullname": "causal_nest.dataset.FeatureType.CATEGORICAL", "modulename": "causal_nest.dataset", "qualname": "FeatureType.CATEGORICAL", "kind": "variable", "doc": "<p>Categorical features are values in a predetermined set of allowed values explicitly treated as strings or integers,\nwhich can be later on encoded.</p>\n", "default_value": "&lt;FeatureType.CATEGORICAL: 1&gt;"}, {"fullname": "causal_nest.dataset.FeatureType.DISCRETE", "modulename": "causal_nest.dataset", "qualname": "FeatureType.DISCRETE", "kind": "variable", "doc": "<p>Integer values.</p>\n", "default_value": "&lt;FeatureType.DISCRETE: 2&gt;"}, {"fullname": "causal_nest.dataset.FeatureType.CONTINUOUS", "modulename": "causal_nest.dataset", "qualname": "FeatureType.CONTINUOUS", "kind": "variable", "doc": "<p>Real values.</p>\n", "default_value": "&lt;FeatureType.CONTINUOUS: 3&gt;"}, {"fullname": "causal_nest.dataset.FeatureType.IGNORABLE", "modulename": "causal_nest.dataset", "qualname": "FeatureType.IGNORABLE", "kind": "variable", "doc": "<p>Denotes a feature which will be ignored in causality evaluations. It does not matter the primitive type, the feature\nwon't count for any algorithm.</p>\n", "default_value": "&lt;FeatureType.IGNORABLE: 4&gt;"}, {"fullname": "causal_nest.dataset.FeatureTypeMap", "modulename": "causal_nest.dataset", "qualname": "FeatureTypeMap", "kind": "class", "doc": "<p>Data structure to map a feature to a given type. A dataset may have columns that can be interpreted ambigously.\nTo eliminate this problem, this feature mapping exists so it can be used to choose which causal discovery methods are\nallowed and particular stats to run.</p>\n"}, {"fullname": "causal_nest.dataset.FeatureTypeMap.__init__", "modulename": "causal_nest.dataset", "qualname": "FeatureTypeMap.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">feature</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">FeatureType</span>,</span><span class=\"param\">\t<span class=\"n\">importance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "causal_nest.dataset.FeatureTypeMap.feature", "modulename": "causal_nest.dataset", "qualname": "FeatureTypeMap.feature", "kind": "variable", "doc": "<p>The column name in dataset referring this map</p>\n", "annotation": ": str"}, {"fullname": "causal_nest.dataset.FeatureTypeMap.type", "modulename": "causal_nest.dataset", "qualname": "FeatureTypeMap.type", "kind": "variable", "doc": "<p>The corresponding type for the given feature</p>\n", "annotation": ": causal_nest.dataset.FeatureType"}, {"fullname": "causal_nest.dataset.FeatureTypeMap.importance", "modulename": "causal_nest.dataset", "qualname": "FeatureTypeMap.importance", "kind": "variable", "doc": "<p>The importance score based on feature importance on regresors or classifiers</p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "causal_nest.dataset.Dataset", "modulename": "causal_nest.dataset", "qualname": "Dataset", "kind": "class", "doc": "<p>Data structure to represent a dataset, its feature mappings and parameters.\nThis structure is meant to be used in multiple <code>Problems</code>, preventing mutation altogheter in all its operations.</p>\n"}, {"fullname": "causal_nest.dataset.Dataset.__init__", "modulename": "causal_nest.dataset", "qualname": "Dataset.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">feature_mapping</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">FeatureTypeMap</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "causal_nest.dataset.Dataset.data", "modulename": "causal_nest.dataset", "qualname": "Dataset.data", "kind": "variable", "doc": "<p>The dataframe containing the data.\nAlthough there are some data handling functions, prefer to input a clean, formatted dataframe.</p>\n", "annotation": ": pandas.core.frame.DataFrame"}, {"fullname": "causal_nest.dataset.Dataset.target", "modulename": "causal_nest.dataset", "qualname": "Dataset.target", "kind": "variable", "doc": "<p>Column name with the target value to be evaluated in causal inference.\nIt must belong in the dataframe at the definition.</p>\n", "annotation": ": str"}, {"fullname": "causal_nest.dataset.Dataset.feature_mapping", "modulename": "causal_nest.dataset", "qualname": "Dataset.feature_mapping", "kind": "variable", "doc": "<p>A map to detemine the feature types which will be used to evaluate metrics and allowed causal discovery algorithms.</p>\n", "annotation": ": List[causal_nest.dataset.FeatureTypeMap]"}, {"fullname": "causal_nest.dataset.MissingDataHandlingMethod", "modulename": "causal_nest.dataset", "qualname": "MissingDataHandlingMethod", "kind": "class", "doc": "<p>An enumeration of allowed methods for treating missing data.</p>\n", "bases": "enum.Enum"}, {"fullname": "causal_nest.dataset.MissingDataHandlingMethod.DROP", "modulename": "causal_nest.dataset", "qualname": "MissingDataHandlingMethod.DROP", "kind": "variable", "doc": "<p>Remove missing values. Uses the <code>dropna</code> function in the dataframe.</p>\n", "default_value": "&lt;MissingDataHandlingMethod.DROP: &#x27;dropna&#x27;&gt;"}, {"fullname": "causal_nest.dataset.MissingDataHandlingMethod.FORWARD_FILL", "modulename": "causal_nest.dataset", "qualname": "MissingDataHandlingMethod.FORWARD_FILL", "kind": "variable", "doc": "<p>Fill missing values propagating the last valid observation.\nCurrently uses the <code>ffill</code> function in the pandas dataframe.</p>\n", "default_value": "&lt;MissingDataHandlingMethod.FORWARD_FILL: &#x27;ffill&#x27;&gt;"}, {"fullname": "causal_nest.dataset.MissingDataHandlingMethod.FORWARD_INTERPOLATION", "modulename": "causal_nest.dataset", "qualname": "MissingDataHandlingMethod.FORWARD_INTERPOLATION", "kind": "variable", "doc": "<p>Fill missing values using a linear forward interpolation.\nCurrently uses the <code>interpolate</code> function in the pandas dataframe.</p>\n", "default_value": "&lt;MissingDataHandlingMethod.FORWARD_INTERPOLATION: &#x27;interpolation&#x27;&gt;"}, {"fullname": "causal_nest.dataset.handle_missing_data", "modulename": "causal_nest.dataset", "qualname": "handle_missing_data", "kind": "function", "doc": "<p>Generates a copy of the dataset handling missing values in the dataset.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset definition.\n    method (MissingDataHandlingMethod, optional): The method for handling\n    missing values. Defaults to MissingDataHandlingMethod.DROP.</p>\n\n<p>Returns:\n    Dataset: A copy of the original dataset with the dataframe missing\n    values handled by the provided method.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">MissingDataHandlingMethod</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">MissingDataHandlingMethod</span><span class=\"o\">.</span><span class=\"n\">DROP</span><span class=\"p\">:</span> <span class=\"s1\">&#39;dropna&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.dataset.problem_type_for_dataset", "modulename": "causal_nest.dataset", "qualname": "problem_type_for_dataset", "kind": "function", "doc": "<p>Determine whether the given dataset is suitable for regression or classification.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset definition.</p>\n\n<p>Returns:\n    str: 'regression' if suitable for regression, 'classification' if suitable for classification.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>, </span><span class=\"param\"><span class=\"n\">unique_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.05</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.dataset.estimate_feature_importances", "modulename": "causal_nest.dataset", "qualname": "estimate_feature_importances", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.dataset.featured_only_data", "modulename": "causal_nest.dataset", "qualname": "featured_only_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery", "modulename": "causal_nest.discovery", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery.known_methods", "modulename": "causal_nest.discovery", "qualname": "known_methods", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&lt;class &#x27;causal_nest.discovery_models.pc.PC&#x27;&gt;, &lt;class &#x27;causal_nest.discovery_models.gs.GS&#x27;&gt;, &lt;class &#x27;causal_nest.discovery_models.ges.GES&#x27;&gt;, &lt;class &#x27;causal_nest.discovery_models.gies.GIES&#x27;&gt;, &lt;class &#x27;causal_nest.discovery_models.cam.CAM&#x27;&gt;, &lt;class &#x27;causal_nest.discovery_models.ccdr.CCDR&#x27;&gt;, &lt;class &#x27;causal_nest.discovery_models.iamb.IAMB&#x27;&gt;, &lt;class &#x27;causal_nest.discovery_models.lingam.LINGAM&#x27;&gt;, &lt;class &#x27;causal_nest.discovery_models.sam.SAM&#x27;&gt;, &lt;class &#x27;causal_nest.discovery_models.bes.BES&#x27;&gt;, &lt;class &#x27;causal_nest.discovery_models.grasp.GRASP&#x27;&gt;, &lt;class &#x27;causal_nest.discovery_models.cgnn.CGNN&#x27;&gt;]"}, {"fullname": "causal_nest.discovery.applyable_models", "modulename": "causal_nest.discovery", "qualname": "applyable_models", "kind": "function", "doc": "<p>Filters and returns a list of models that are applicable to the given problem.</p>\n\n<p>Args:\n    problem (Problem): The problem instance containing the dataset.</p>\n\n<p>Returns:\n    list: A list of models that are applicable to the given problem.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">problem</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">Problem</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery.discover_with_model", "modulename": "causal_nest.discovery", "qualname": "discover_with_model", "kind": "function", "doc": "<p>Discovers a causal graph using the specified model.</p>\n\n<p>Args:\n    problem (Problem): The problem instance containing the dataset.\n    model (DiscoveryMethodModel): The discovery model to use.\n    verbose (bool, optional): If True, prints and plots the discovered graph. Defaults to False.\n    orient_toward_target (bool, optional): If True, orients the graph toward the target. Defaults to True.</p>\n\n<p>Returns:\n    DiscoveryResult: The result of the discovery process, including the discovered graph and various statistics.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">problem</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">Problem</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">discovery_models</span><span class=\"o\">.</span><span class=\"n\">discovery_method_model</span><span class=\"o\">.</span><span class=\"n\">DiscoveryMethodModel</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">orient_toward_target</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery.discover_with_all_models", "modulename": "causal_nest.discovery", "qualname": "discover_with_all_models", "kind": "function", "doc": "<p>Discovers causal graphs using all applicable models.</p>\n\n<p>Args:\n    problem (Problem): The problem instance containing the dataset.\n    max_seconds_model (int, optional): The maximum time allowed for each model. Defaults to 90.\n    verbose (bool, optional): If True, prints warnings and errors. Defaults to False.\n    max_workers (int, optional): The maximum number of workers to use. Defaults to the number of CPU cores.\n    orient_toward_target (bool, optional): If True, orients the graph toward the target. Defaults to True.</p>\n\n<p>Returns:\n    Problem: The problem instance with the discovery results added.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">problem</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">Problem</span>,</span><span class=\"param\">\t<span class=\"n\">max_seconds_model</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">90</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_workers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">orient_toward_target</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery_models", "modulename": "causal_nest.discovery_models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery_models.bes", "modulename": "causal_nest.discovery_models.bes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery_models.bes.BES", "modulename": "causal_nest.discovery_models.bes", "qualname": "BES", "kind": "class", "doc": "<p>BIC Exact Search (BES) algorithm for causal discovery.</p>\n\n<p>This class implements the BIC Exact Search algorithm, which is used to discover causal graphs from data.\nIt assumes linearity but does not assume Gaussian distribution of the data.</p>\n\n<p>Attributes:\n    allowed_feature_types (list): List of allowed feature types for this method.\n    gaussian_assumption (bool): Indicates if the method assumes Gaussian distribution.\n    linearity_assumption (bool): Indicates if the method assumes linearity.</p>\n", "bases": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel"}, {"fullname": "causal_nest.discovery_models.bes.BES.__init__", "modulename": "causal_nest.discovery_models.bes", "qualname": "BES.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "causal_nest.discovery_models.bes.BES.create_graph_from_data", "modulename": "causal_nest.discovery_models.bes", "qualname": "BES.create_graph_from_data", "kind": "function", "doc": "<p>Creates a causal graph from the given dataset using the BIC Exact Search algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery_models.cam", "modulename": "causal_nest.discovery_models.cam", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery_models.cam.CAM", "modulename": "causal_nest.discovery_models.cam", "qualname": "CAM", "kind": "class", "doc": "<p>Causal Additive Models (CAM) algorithm for causal discovery.</p>\n\n<p>This class implements the CAM algorithm, which is used to discover causal graphs from data.\nIt assumes both Gaussian distribution and linearity of the data.</p>\n\n<p>Attributes:\n    allowed_feature_types (list): List of allowed feature types for this method.\n    gaussian_assumption (bool): Indicates if the method assumes Gaussian distribution.\n    linearity_assumption (bool): Indicates if the method assumes linearity.</p>\n", "bases": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel"}, {"fullname": "causal_nest.discovery_models.cam.CAM.__init__", "modulename": "causal_nest.discovery_models.cam", "qualname": "CAM.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "causal_nest.discovery_models.cam.CAM.create_graph_from_data", "modulename": "causal_nest.discovery_models.cam", "qualname": "CAM.create_graph_from_data", "kind": "function", "doc": "<p>Creates a causal graph from the given dataset using the CAM algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery_models.ccdr", "modulename": "causal_nest.discovery_models.ccdr", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery_models.ccdr.CCDR", "modulename": "causal_nest.discovery_models.ccdr", "qualname": "CCDR", "kind": "class", "doc": "<p>Creates a causal graph from the given dataset using the CAM algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "bases": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel"}, {"fullname": "causal_nest.discovery_models.ccdr.CCDR.__init__", "modulename": "causal_nest.discovery_models.ccdr", "qualname": "CCDR.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "causal_nest.discovery_models.ccdr.CCDR.create_graph_from_data", "modulename": "causal_nest.discovery_models.ccdr", "qualname": "CCDR.create_graph_from_data", "kind": "function", "doc": "<p>Creates a causal graph from the given dataset using the CAM algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery_models.cgnn", "modulename": "causal_nest.discovery_models.cgnn", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery_models.cgnn.CGNN", "modulename": "causal_nest.discovery_models.cgnn", "qualname": "CGNN", "kind": "class", "doc": "<p>Creates a causal graph from the given dataset using the CAM algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "bases": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel"}, {"fullname": "causal_nest.discovery_models.cgnn.CGNN.__init__", "modulename": "causal_nest.discovery_models.cgnn", "qualname": "CGNN.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "causal_nest.discovery_models.cgnn.CGNN.create_graph_from_data", "modulename": "causal_nest.discovery_models.cgnn", "qualname": "CGNN.create_graph_from_data", "kind": "function", "doc": "<p>Creates a causal graph from the given dataset using the CGNN algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery_models.discovery_method_model", "modulename": "causal_nest.discovery_models.discovery_method_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel", "modulename": "causal_nest.discovery_models.discovery_method_model", "qualname": "DiscoveryMethodModel", "kind": "class", "doc": "<p>Base class for all causal discovery models.</p>\n\n<p>This class serves as a base for all causal discovery models that operate on observational data.\nIt provides a common interface and structure for discovery models, ensuring consistency and\nease of extension. The primary feature of this class is the <code>predict</code> function that executes\na function according to the given arguments.</p>\n\n<p>Attributes:\n    allowed_feature_types (List[FeatureType]): List of allowed feature types for the discovery method.\n    gaussian_assumption (bool): Indicates if the method assumes the data follows a Gaussian distribution.\n    linearity_assumption (bool): Indicates if the method assumes linear relationships between features.</p>\n"}, {"fullname": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel.__init__", "modulename": "causal_nest.discovery_models.discovery_method_model", "qualname": "DiscoveryMethodModel.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">allowed_feature_types</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">FeatureType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">gaussian_assumption</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">linearity_assumption</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel.allowed_feature_types", "modulename": "causal_nest.discovery_models.discovery_method_model", "qualname": "DiscoveryMethodModel.allowed_feature_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[causal_nest.dataset.FeatureType]", "default_value": "[&lt;FeatureType.CATEGORICAL: 1&gt;, &lt;FeatureType.DISCRETE: 2&gt;, &lt;FeatureType.CONTINUOUS: 3&gt;, &lt;FeatureType.IGNORABLE: 4&gt;]"}, {"fullname": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel.gaussian_assumption", "modulename": "causal_nest.discovery_models.discovery_method_model", "qualname": "DiscoveryMethodModel.gaussian_assumption", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel.linearity_assumption", "modulename": "causal_nest.discovery_models.discovery_method_model", "qualname": "DiscoveryMethodModel.linearity_assumption", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel.is_method_allowed", "modulename": "causal_nest.discovery_models.discovery_method_model", "qualname": "DiscoveryMethodModel.is_method_allowed", "kind": "function", "doc": "<p>Checks if a given method can be applied to a given dataset.</p>\n\n<p>It validates as follows, stopping when a falsy condition is met:\n    1. Validates the dataset field type mapping with the subclass <code>allowed_feature_types</code> field;\n    2. Validates if the data is normal if the subclass <code>gaussian_assumption</code> field is <code>True</code>;\n    3. Validates if all feature pairs in the data are linear if the subclass <code>linearity_assumption</code> field is <code>True</code>;</p>\n\n<p>Args:\n    dataset (Dataset): The dataset to validate.</p>\n\n<p>Raises:\n    ValueError: If the dataset does not meet the required conditions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel.create_graph_from_data", "modulename": "causal_nest.discovery_models.discovery_method_model", "qualname": "DiscoveryMethodModel.create_graph_from_data", "kind": "function", "doc": "<p>Infers a directed graph from the data.</p>\n\n<p>This method is intended to be overridden by subclasses to provide specific implementations\nfor different discovery methods. It raises a NotImplementedError if called directly from\nthe base class.</p>\n\n<p>Args:\n    data (Dataset): The dataset to use for graph inference.\n    **kwargs: Additional arguments for graph inference.</p>\n\n<p>Raises:\n    NotImplementedError: This method should be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery_models.fast_iamb", "modulename": "causal_nest.discovery_models.fast_iamb", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery_models.fast_iamb.FAST_IAMB", "modulename": "causal_nest.discovery_models.fast_iamb", "qualname": "FAST_IAMB", "kind": "class", "doc": "<p>Fast Incremental Association Markov Blanket (FAST_IAMB) algorithm for causal discovery.</p>\n\n<p>This class implements the FAST_IAMB algorithm, which is used to discover causal graphs from data.\nIt does not assume Gaussian distribution or linearity of the data.</p>\n\n<p>Attributes:\n    allowed_feature_types (list): List of allowed feature types for this method.\n    gaussian_assumption (bool): Indicates if the method assumes Gaussian distribution.\n    linearity_assumption (bool): Indicates if the method assumes linearity.</p>\n", "bases": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel"}, {"fullname": "causal_nest.discovery_models.fast_iamb.FAST_IAMB.__init__", "modulename": "causal_nest.discovery_models.fast_iamb", "qualname": "FAST_IAMB.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "causal_nest.discovery_models.fast_iamb.FAST_IAMB.create_graph_from_data", "modulename": "causal_nest.discovery_models.fast_iamb", "qualname": "FAST_IAMB.create_graph_from_data", "kind": "function", "doc": "<p>Creates a causal graph from the given dataset using the FAST_IAMB algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery_models.ges", "modulename": "causal_nest.discovery_models.ges", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery_models.ges.GES", "modulename": "causal_nest.discovery_models.ges", "qualname": "GES", "kind": "class", "doc": "<p>Greedy Equivalence Search (GES) algorithm for causal discovery.</p>\n\n<p>This class implements the GES algorithm, which is used to discover causal graphs from data.\nIt assumes both Gaussian distribution and linearity of the data.</p>\n\n<p>Attributes:\n    allowed_feature_types (list): List of allowed feature types for this method.\n    gaussian_assumption (bool): Indicates if the method assumes Gaussian distribution.\n    linearity_assumption (bool): Indicates if the method assumes linearity.</p>\n", "bases": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel"}, {"fullname": "causal_nest.discovery_models.ges.GES.__init__", "modulename": "causal_nest.discovery_models.ges", "qualname": "GES.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "causal_nest.discovery_models.ges.GES.create_graph_from_data", "modulename": "causal_nest.discovery_models.ges", "qualname": "GES.create_graph_from_data", "kind": "function", "doc": "<p>Creates a causal graph from the given dataset using the GES algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery_models.gies", "modulename": "causal_nest.discovery_models.gies", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery_models.gies.GIES", "modulename": "causal_nest.discovery_models.gies", "qualname": "GIES", "kind": "class", "doc": "<p>Greedy Interventional Equivalence Search (GIES) algorithm for causal discovery.</p>\n\n<p>This class implements the GIES algorithm, which is used to discover causal graphs from data.\nIt assumes both Gaussian distribution and linearity of the data.</p>\n\n<p>Attributes:\n    allowed_feature_types (list): List of allowed feature types for this method.\n    gaussian_assumption (bool): Indicates if the method assumes Gaussian distribution.\n    linearity_assumption (bool): Indicates if the method assumes linearity.</p>\n", "bases": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel"}, {"fullname": "causal_nest.discovery_models.gies.GIES.__init__", "modulename": "causal_nest.discovery_models.gies", "qualname": "GIES.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "causal_nest.discovery_models.gies.GIES.create_graph_from_data", "modulename": "causal_nest.discovery_models.gies", "qualname": "GIES.create_graph_from_data", "kind": "function", "doc": "<p>Creates a causal graph from the given dataset using the GIES algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery_models.grasp", "modulename": "causal_nest.discovery_models.grasp", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery_models.grasp.GRASP", "modulename": "causal_nest.discovery_models.grasp", "qualname": "GRASP", "kind": "class", "doc": "<p>Greedy Sparsest Permutation (GRaSP) algorithm for causal discovery.</p>\n\n<p>This class implements the GRaSP algorithm, which is used to discover causal graphs from data.\nIt assumes both Gaussian distribution and linearity of the data.</p>\n\n<p>Attributes:\n    allowed_feature_types (list): List of allowed feature types for this method.\n    gaussian_assumption (bool): Indicates if the method assumes Gaussian distribution.\n    linearity_assumption (bool): Indicates if the method assumes linearity.</p>\n", "bases": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel"}, {"fullname": "causal_nest.discovery_models.grasp.GRASP.__init__", "modulename": "causal_nest.discovery_models.grasp", "qualname": "GRASP.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "causal_nest.discovery_models.grasp.GRASP.create_graph_from_data", "modulename": "causal_nest.discovery_models.grasp", "qualname": "GRASP.create_graph_from_data", "kind": "function", "doc": "<p>Creates a causal graph from the given dataset using the GRaSP algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery_models.gs", "modulename": "causal_nest.discovery_models.gs", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery_models.gs.GS", "modulename": "causal_nest.discovery_models.gs", "qualname": "GS", "kind": "class", "doc": "<p>Grow-Shrink (GS) algorithm for causal discovery.</p>\n\n<p>This class implements the GS algorithm, which is used to discover causal graphs from data.\nIt does not assume Gaussian distribution or linearity of the data.</p>\n\n<p>Attributes:\n    allowed_feature_types (list): List of allowed feature types for this method.\n    gaussian_assumption (bool): Indicates if the method assumes Gaussian distribution.\n    linearity_assumption (bool): Indicates if the method assumes linearity.</p>\n", "bases": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel"}, {"fullname": "causal_nest.discovery_models.gs.GS.__init__", "modulename": "causal_nest.discovery_models.gs", "qualname": "GS.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "causal_nest.discovery_models.gs.GS.create_graph_from_data", "modulename": "causal_nest.discovery_models.gs", "qualname": "GS.create_graph_from_data", "kind": "function", "doc": "<p>Creates a causal graph from the given dataset using the GS algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery_models.iamb", "modulename": "causal_nest.discovery_models.iamb", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery_models.iamb.IAMB", "modulename": "causal_nest.discovery_models.iamb", "qualname": "IAMB", "kind": "class", "doc": "<p>Incremental Association Markov Blanket (IAMB) algorithm for causal discovery.</p>\n\n<p>This class implements the IAMB algorithm, which is used to discover causal graphs from data.\nIt does not assume Gaussian distribution or linearity of the data.</p>\n\n<p>Attributes:\n    allowed_feature_types (list): List of allowed feature types for this method.\n    gaussian_assumption (bool): Indicates if the method assumes Gaussian distribution.\n    linearity_assumption (bool): Indicates if the method assumes linearity.</p>\n", "bases": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel"}, {"fullname": "causal_nest.discovery_models.iamb.IAMB.__init__", "modulename": "causal_nest.discovery_models.iamb", "qualname": "IAMB.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "causal_nest.discovery_models.iamb.IAMB.create_graph_from_data", "modulename": "causal_nest.discovery_models.iamb", "qualname": "IAMB.create_graph_from_data", "kind": "function", "doc": "<p>Creates a causal graph from the given dataset using the IAMB algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery_models.inter_iamb", "modulename": "causal_nest.discovery_models.inter_iamb", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery_models.inter_iamb.INTER_IAMB", "modulename": "causal_nest.discovery_models.inter_iamb", "qualname": "INTER_IAMB", "kind": "class", "doc": "<p>Interleaved Incremental Association Markov Blanket (INTER_IAMB) algorithm for causal discovery.</p>\n\n<p>This class implements the INTER_IAMB algorithm, which is used to discover causal graphs from data.\nIt does not assume Gaussian distribution or linearity of the data.</p>\n\n<p>Attributes:\n    allowed_feature_types (list): List of allowed feature types for this method.\n    gaussian_assumption (bool): Indicates if the method assumes Gaussian distribution.\n    linearity_assumption (bool): Indicates if the method assumes linearity.</p>\n", "bases": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel"}, {"fullname": "causal_nest.discovery_models.inter_iamb.INTER_IAMB.__init__", "modulename": "causal_nest.discovery_models.inter_iamb", "qualname": "INTER_IAMB.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "causal_nest.discovery_models.inter_iamb.INTER_IAMB.create_graph_from_data", "modulename": "causal_nest.discovery_models.inter_iamb", "qualname": "INTER_IAMB.create_graph_from_data", "kind": "function", "doc": "<p>Creates a causal graph from the given dataset using the INTER_IAMB algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery_models.lingam", "modulename": "causal_nest.discovery_models.lingam", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery_models.lingam.LINGAM", "modulename": "causal_nest.discovery_models.lingam", "qualname": "LINGAM", "kind": "class", "doc": "<p>Creates a causal graph from the given dataset using the INTER_IAMB algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "bases": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel"}, {"fullname": "causal_nest.discovery_models.lingam.LINGAM.__init__", "modulename": "causal_nest.discovery_models.lingam", "qualname": "LINGAM.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "causal_nest.discovery_models.lingam.LINGAM.create_graph_from_data", "modulename": "causal_nest.discovery_models.lingam", "qualname": "LINGAM.create_graph_from_data", "kind": "function", "doc": "<p>Creates a causal graph from the given dataset using the INTER_IAMB algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery_models.pc", "modulename": "causal_nest.discovery_models.pc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery_models.pc.PC", "modulename": "causal_nest.discovery_models.pc", "qualname": "PC", "kind": "class", "doc": "<p>Peter-Clark (PC) algorithm for causal discovery.</p>\n\n<p>This class implements the PC algorithm, which is used to discover causal graphs from data.\nIt assumes both Gaussian distribution and linearity of the data.</p>\n\n<p>Attributes:\n    allowed_feature_types (list): List of allowed feature types for this method.\n    gaussian_assumption (bool): Indicates if the method assumes Gaussian distribution.\n    linearity_assumption (bool): Indicates if the method assumes linearity.</p>\n", "bases": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel"}, {"fullname": "causal_nest.discovery_models.pc.PC.__init__", "modulename": "causal_nest.discovery_models.pc", "qualname": "PC.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "causal_nest.discovery_models.pc.PC.create_graph_from_data", "modulename": "causal_nest.discovery_models.pc", "qualname": "PC.create_graph_from_data", "kind": "function", "doc": "<p>Creates a causal graph from the given dataset using the PC algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.discovery_models.sam", "modulename": "causal_nest.discovery_models.sam", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.discovery_models.sam.SAM", "modulename": "causal_nest.discovery_models.sam", "qualname": "SAM", "kind": "class", "doc": "<p>Structural Agnostic Model (SAM) algorithm for causal discovery.</p>\n\n<p>This class implements the SAM algorithm, which is used to discover causal graphs from data.\nIt assumes both Gaussian distribution and linearity of the data.</p>\n\n<p>Attributes:\n    allowed_feature_types (list): List of allowed feature types for this method.\n    gaussian_assumption (bool): Indicates if the method assumes Gaussian distribution.\n    linearity_assumption (bool): Indicates if the method assumes linearity.</p>\n", "bases": "causal_nest.discovery_models.discovery_method_model.DiscoveryMethodModel"}, {"fullname": "causal_nest.discovery_models.sam.SAM.__init__", "modulename": "causal_nest.discovery_models.sam", "qualname": "SAM.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "causal_nest.discovery_models.sam.SAM.create_graph_from_data", "modulename": "causal_nest.discovery_models.sam", "qualname": "SAM.create_graph_from_data", "kind": "function", "doc": "<p>Creates a causal graph from the given dataset using the SAM algorithm.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset from which to create the causal graph.</p>\n\n<p>Returns:\n    nx.DiGraph: The discovered causal graph.</p>\n\n<p>Raises:\n    ValueError: If the method is not allowed to be used with the given dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.distribution", "modulename": "causal_nest.distribution", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.distribution.normality_checkable_types", "modulename": "causal_nest.distribution", "qualname": "normality_checkable_types", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&lt;FeatureType.CONTINUOUS: 3&gt;, &lt;FeatureType.DISCRETE: 2&gt;]"}, {"fullname": "causal_nest.distribution.is_normal", "modulename": "causal_nest.distribution", "qualname": "is_normal", "kind": "function", "doc": "<p>Checks if the features in the dataset follow a normal distribution.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset to check for normality.\n    threshold (float, optional): The p-value threshold for the normality test. Defaults to 0.05.</p>\n\n<p>Returns:\n    bool: True if all features pass the normality test, False otherwise.</p>\n\n<p>Raises:\n    ValueError: If the provided dataset is not an instance of <code>Dataset</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.distribution.is_linear", "modulename": "causal_nest.distribution", "qualname": "is_linear", "kind": "function", "doc": "<p>Checks if the relationships between features in the dataset are linear.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset to check for linearity.</p>\n\n<p>Returns:\n    bool: True if all feature pairs have a linear relationship, False otherwise.</p>\n\n<p>Raises:\n    ValueError: If the provided dataset is not an instance of <code>Dataset</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.distribution.check_linearity", "modulename": "causal_nest.distribution", "qualname": "check_linearity", "kind": "function", "doc": "<p>Checks if the relationship between two variables is linear.</p>\n\n<p>Args:\n    x (np.ndarray): The first variable.\n    y (np.ndarray): The second variable.\n    threshold (float, optional): The threshold for the mean of residuals to consider the relationship linear. Defaults to 0.05.</p>\n\n<p>Returns:\n    bool: True if the relationship is linear, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.05</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.estimation", "modulename": "causal_nest.estimation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.estimation.estimate_model_effects", "modulename": "causal_nest.estimation", "qualname": "estimate_model_effects", "kind": "function", "doc": "<p>Estimates the causal effects for all features in the dataset using the discovered model.</p>\n\n<p>Args:\n    problem (Problem): The problem instance containing the dataset.\n    dr (DiscoveryResult): The discovery result containing the causal graph.\n    timeout (int, optional): The maximum time allowed for the estimation process. Defaults to 180 seconds.</p>\n\n<p>Returns:\n    dict: A dictionary containing the model name and the estimation results for each feature.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">problem</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">Problem</span>,</span><span class=\"param\">\t<span class=\"n\">dr</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">discovery_result</span><span class=\"o\">.</span><span class=\"n\">DiscoveryResult</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">180</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.estimation.estimate_effect", "modulename": "causal_nest.estimation", "qualname": "estimate_effect", "kind": "function", "doc": "<p>Estimates the causal effect of a treatment on the outcome using the discovered model.</p>\n\n<p>Args:\n    problem (Problem): The problem instance containing the dataset.\n    dr (DiscoveryResult): The discovery result containing the causal graph.\n    treatment (str): The treatment variable for which to estimate the causal effect.</p>\n\n<p>Returns:\n    EstimationResult: The result of the estimation process, including the estimand and p-value.</p>\n\n<p>Raises:\n    ValueError: If the treatment variable does not exist in the dataset.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">problem</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">Problem</span>,</span><span class=\"param\">\t<span class=\"n\">dr</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">discovery_result</span><span class=\"o\">.</span><span class=\"n\">DiscoveryResult</span>,</span><span class=\"param\">\t<span class=\"n\">treatment</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">estimation_result</span><span class=\"o\">.</span><span class=\"n\">EstimationResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.estimation.estimate_all_effects", "modulename": "causal_nest.estimation", "qualname": "estimate_all_effects", "kind": "function", "doc": "<p>Estimates the causal effects for all features in the dataset using all discovered models.</p>\n\n<p>Args:\n    problem (Problem): The problem instance containing the dataset and discovery results.\n    max_seconds_model (int, optional): The maximum time allowed for each model's estimation process. Defaults to 360 seconds.\n    verbose (bool, optional): If True, prints warnings and errors. Defaults to False.\n    max_workers (int, optional): The maximum number of workers to use. Defaults to the number of CPU cores.</p>\n\n<p>Returns:\n    Problem: The problem instance with the estimation results added.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">problem</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">Problem</span>,</span><span class=\"param\">\t<span class=\"n\">max_seconds_model</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">360</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.knowledge", "modulename": "causal_nest.knowledge", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.knowledge.Knowledge", "modulename": "causal_nest.knowledge", "qualname": "Knowledge", "kind": "class", "doc": "<p>A class to represent the knowledge of required and forbidden edges in a causal graph.</p>\n\n<p>Attributes:\n    required_edges (List[Tuple[str, str]]): A list of tuples representing the required edges.\n    forbidden_edges (List[Tuple[str, str]]): A list of tuples representing the forbidden edges.</p>\n"}, {"fullname": "causal_nest.knowledge.Knowledge.__init__", "modulename": "causal_nest.knowledge", "qualname": "Knowledge.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">required_edges</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">forbidden_edges</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "causal_nest.knowledge.Knowledge.required_edges", "modulename": "causal_nest.knowledge", "qualname": "Knowledge.required_edges", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Tuple[str, str]]"}, {"fullname": "causal_nest.knowledge.Knowledge.forbidden_edges", "modulename": "causal_nest.knowledge", "qualname": "Knowledge.forbidden_edges", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Tuple[str, str]]"}, {"fullname": "causal_nest.knowledge.parse_knowledge_file", "modulename": "causal_nest.knowledge", "qualname": "parse_knowledge_file", "kind": "function", "doc": "<p>Parses a knowledge file to extract required and forbidden edges.</p>\n\n<p>Args:\n    file_path (str): The path to the knowledge file.</p>\n\n<p>Returns:\n    Knowledge: An instance of the Knowledge class containing the parsed edges.</p>\n\n<p>Raises:\n    ValueError: If the file format is incorrect.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">Knowledge</span>:</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.problem", "modulename": "causal_nest.problem", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.problem.Problem", "modulename": "causal_nest.problem", "qualname": "Problem", "kind": "class", "doc": "<p>Data structure to represent a problem.</p>\n\n<p>A problem is the starting point to causality. It contains all the required data and configurations\nfor a causal pipeline.</p>\n\n<p>Attributes:\n    dataset (Dataset): The dataset setup for this problem. Multiple problems may be used with the same dataset.\n    description (str): A quick description of this problem, useful for distinguishing between problems in benchmarks.\n    ground_truth (Optional[nx.DiGraph]): A graph containing the ground truth for the problem.\n    knowledge (Knowledge): Set of required and forbidden edges, which will be evaluated later to prioritize edges while dagifying and shown.\n    discovery_results (Optional[Dict[str, DiscoveryResult]]): Map of discovery results. The key is the discovery method name and the value is the result.\n    estimation_results (Optional[Dict[str, List[EstimationResult]]]): Map of estimation results. The key is the discovery method name and the value is the list of feature estimations.\n    refutation_results (Optional[Dict[str, List[RefutationResult]]]): Map of refutation results. The key is the discovery method name and the value is the list of feature refutations.</p>\n"}, {"fullname": "causal_nest.problem.Problem.__init__", "modulename": "causal_nest.problem", "qualname": "Problem.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ground_truth</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">knowledge</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">Knowledge</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">discovery_results</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">discovery_result</span><span class=\"o\">.</span><span class=\"n\">DiscoveryResult</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">estimation_results</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">estimation_result</span><span class=\"o\">.</span><span class=\"n\">EstimationResult</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">refutation_results</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">refutation_result</span><span class=\"o\">.</span><span class=\"n\">RefutationResult</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "causal_nest.problem.Problem.dataset", "modulename": "causal_nest.problem", "qualname": "Problem.dataset", "kind": "variable", "doc": "<p></p>\n", "annotation": ": causal_nest.dataset.Dataset"}, {"fullname": "causal_nest.problem.Problem.description", "modulename": "causal_nest.problem", "qualname": "Problem.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "causal_nest.problem.Problem.ground_truth", "modulename": "causal_nest.problem", "qualname": "Problem.ground_truth", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[networkx.classes.digraph.DiGraph]", "default_value": "None"}, {"fullname": "causal_nest.problem.Problem.knowledge", "modulename": "causal_nest.problem", "qualname": "Problem.knowledge", "kind": "variable", "doc": "<p></p>\n", "annotation": ": causal_nest.knowledge.Knowledge"}, {"fullname": "causal_nest.problem.Problem.discovery_results", "modulename": "causal_nest.problem", "qualname": "Problem.discovery_results", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Dict[str, causal_nest.results.discovery_result.DiscoveryResult]]", "default_value": "None"}, {"fullname": "causal_nest.problem.Problem.estimation_results", "modulename": "causal_nest.problem", "qualname": "Problem.estimation_results", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Dict[str, List[causal_nest.results.estimation_result.EstimationResult]]]", "default_value": "None"}, {"fullname": "causal_nest.problem.Problem.refutation_results", "modulename": "causal_nest.problem", "qualname": "Problem.refutation_results", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Dict[str, List[causal_nest.results.refutation_result.RefutationResult]]]", "default_value": "None"}, {"fullname": "causal_nest.refutation", "modulename": "causal_nest.refutation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.refutation.known_methods", "modulename": "causal_nest.refutation", "qualname": "known_methods", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&lt;class &#x27;causal_nest.refutation_models.placebo_permute.PlaceboPermute&#x27;&gt;, &lt;class &#x27;causal_nest.refutation_models.random_common_cause.RandomCommonCause&#x27;&gt;, &lt;class &#x27;causal_nest.refutation_models.subset_removal.SubsetRemoval&#x27;&gt;]"}, {"fullname": "causal_nest.refutation.refute_with_model", "modulename": "causal_nest.refutation", "qualname": "refute_with_model", "kind": "function", "doc": "<p>Refutes an estimation result using the specified refutation model.</p>\n\n<p>Args:\n    problem (Problem): The problem instance containing the dataset.\n    estimation_result (EstimationResult): The estimation result to be refuted.\n    model (RefutationMethodModel): The refutation model to use.</p>\n\n<p>Returns:\n    RefutationResult: The result of the refutation process, including runtime.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">problem</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">Problem</span>,</span><span class=\"param\">\t<span class=\"n\">estimation_result</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">estimation_result</span><span class=\"o\">.</span><span class=\"n\">EstimationResult</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">refutation_models</span><span class=\"o\">.</span><span class=\"n\">refutation_method_model</span><span class=\"o\">.</span><span class=\"n\">RefutationMethodModel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.refutation.refute_estimation", "modulename": "causal_nest.refutation", "qualname": "refute_estimation", "kind": "function", "doc": "<p>Refutes an estimation result using all known refutation models within a given timeout.</p>\n\n<p>Args:\n    problem (Problem): The problem instance containing the dataset.\n    er (EstimationResult): The estimation result to be refuted.\n    timeout (int, optional): The maximum time allowed for the refutation process. Defaults to 180 seconds.</p>\n\n<p>Returns:\n    dict: A dictionary containing the model name and the refutation results.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">problem</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">Problem</span>,</span><span class=\"param\">\t<span class=\"n\">er</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">estimation_result</span><span class=\"o\">.</span><span class=\"n\">EstimationResult</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">180</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.refutation.refute_all_results", "modulename": "causal_nest.refutation", "qualname": "refute_all_results", "kind": "function", "doc": "<p>Refutes all estimation results using all known refutation models within given time constraints.</p>\n\n<p>Args:\n    problem (Problem): The problem instance containing the dataset and estimation results.\n    max_seconds_global (int, optional): The maximum time allowed for the global refutation process. Defaults to 180 seconds.\n    max_seconds_model (int, optional): The maximum time allowed for each model's refutation process. Defaults to 25 seconds.\n    verbose (bool, optional): If True, prints warnings and errors. Defaults to False.\n    max_workers (int, optional): The maximum number of workers to use. Defaults to the number of CPU cores.</p>\n\n<p>Returns:\n    Problem: The problem instance with the refutation results added.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">problem</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">Problem</span>,</span><span class=\"param\">\t<span class=\"n\">max_seconds_global</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">180</span>,</span><span class=\"param\">\t<span class=\"n\">max_seconds_model</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">25</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.refutation_models", "modulename": "causal_nest.refutation_models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.refutation_models.placebo_permute", "modulename": "causal_nest.refutation_models.placebo_permute", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.refutation_models.placebo_permute.PlaceboPermute", "modulename": "causal_nest.refutation_models.placebo_permute", "qualname": "PlaceboPermute", "kind": "class", "doc": "<p>Class for placebo permutation refutation method.</p>\n\n<p>This class implements the placebo permutation method for refuting causal estimates.\nIt inherits from the RefutationMethodModel base class and overrides the refute_estimate method\nto provide the specific implementation for placebo permutation.</p>\n\n<p>Attributes:\n    None</p>\n", "bases": "causal_nest.refutation_models.refutation_method_model.RefutationMethodModel"}, {"fullname": "causal_nest.refutation_models.placebo_permute.PlaceboPermute.refute_estimate", "modulename": "causal_nest.refutation_models.placebo_permute", "qualname": "PlaceboPermute.refute_estimate", "kind": "function", "doc": "<p>Refutes the estimate using placebo permutation.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset to use for refutation.\n    estimation_result (EstimationResult): The estimation result to refute.\n    **kwargs: Additional arguments for refutation.</p>\n\n<p>Returns:\n    RefutationResult: The result of the refutation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">estimation_result</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">estimation_result</span><span class=\"o\">.</span><span class=\"n\">EstimationResult</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.refutation_models.random_common_cause", "modulename": "causal_nest.refutation_models.random_common_cause", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.refutation_models.random_common_cause.RandomCommonCause", "modulename": "causal_nest.refutation_models.random_common_cause", "qualname": "RandomCommonCause", "kind": "class", "doc": "<p>Class for random common cause refutation method.</p>\n\n<p>This class implements the random common cause method for refuting causal estimates.\nIt inherits from the RefutationMethodModel base class and overrides the refute_estimate method\nto provide the specific implementation for random common cause.</p>\n\n<p>Attributes:\n    None</p>\n", "bases": "causal_nest.refutation_models.refutation_method_model.RefutationMethodModel"}, {"fullname": "causal_nest.refutation_models.random_common_cause.RandomCommonCause.refute_estimate", "modulename": "causal_nest.refutation_models.random_common_cause", "qualname": "RandomCommonCause.refute_estimate", "kind": "function", "doc": "<p>Refutes the estimate using random common cause.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset to use for refutation.\n    estimation_result (EstimationResult): The estimation result to refute.\n    **kwargs: Additional arguments for refutation.</p>\n\n<p>Returns:\n    RefutationResult: The result of the refutation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">estimation_result</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">estimation_result</span><span class=\"o\">.</span><span class=\"n\">EstimationResult</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.refutation_models.refutation_method_model", "modulename": "causal_nest.refutation_models.refutation_method_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.refutation_models.refutation_method_model.RefutationMethodModel", "modulename": "causal_nest.refutation_models.refutation_method_model", "qualname": "RefutationMethodModel", "kind": "class", "doc": "<p>Base class for all causal refutation models.</p>\n\n<p>This class serves as an abstract base class for implementing various causal refutation methods.\nIt provides a common interface and structure for refutation models, ensuring consistency and\nease of extension. The primary method to be implemented by subclasses is <code>refute_estimate</code>.</p>\n\n<p>Attributes:\n    None</p>\n"}, {"fullname": "causal_nest.refutation_models.refutation_method_model.RefutationMethodModel.refute_estimate", "modulename": "causal_nest.refutation_models.refutation_method_model", "qualname": "RefutationMethodModel.refute_estimate", "kind": "function", "doc": "<p>Refutes the causal estimate using a specific method.</p>\n\n<p>This method is intended to be overridden by subclasses to provide specific implementations\nfor different refutation methods. It raises a NotImplementedError if called directly from\nthe base class.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset to use for refutation.\n    estimation_result (EstimationResult): The estimation result to refute.\n    **kwargs: Additional arguments for refutation.</p>\n\n<p>Raises:\n    NotImplementedError: This method should be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">estimation_result</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.refutation_models.subset_removal", "modulename": "causal_nest.refutation_models.subset_removal", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.refutation_models.subset_removal.SubsetRemoval", "modulename": "causal_nest.refutation_models.subset_removal", "qualname": "SubsetRemoval", "kind": "class", "doc": "<p>Class for subset removal refutation method.</p>\n\n<p>This class implements the subset removal method for refuting causal estimates.\nIt inherits from the RefutationMethodModel base class and overrides the refute_estimate method\nto provide the specific implementation for subset removal.</p>\n\n<p>Attributes:\n    None</p>\n", "bases": "causal_nest.refutation_models.refutation_method_model.RefutationMethodModel"}, {"fullname": "causal_nest.refutation_models.subset_removal.SubsetRemoval.refute_estimate", "modulename": "causal_nest.refutation_models.subset_removal", "qualname": "SubsetRemoval.refute_estimate", "kind": "function", "doc": "<p>Refutes the estimate using subset removal.</p>\n\n<p>Args:\n    dataset (Dataset): The dataset to use for refutation.\n    estimation_result (EstimationResult): The estimation result to refute.\n    **kwargs: Additional arguments for refutation.</p>\n\n<p>Returns:\n    RefutationResult: The result of the refutation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">estimation_result</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">estimation_result</span><span class=\"o\">.</span><span class=\"n\">EstimationResult</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.result", "modulename": "causal_nest.result", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.result.colors", "modulename": "causal_nest.result", "qualname": "colors", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;gray&#x27;: &#x27;#A9A9A9&#x27;, &#x27;green&#x27;: &#x27;#4CAF50&#x27;, &#x27;amber&#x27;: &#x27;#FFC107&#x27;, &#x27;red&#x27;: &#x27;#F44336&#x27;, &#x27;blue&#x27;: &#x27;#2196F3&#x27;, &#x27;cyan&#x27;: &#x27;#7EC1D7&#x27;, &#x27;light_blue&#x27;: &#x27;#ADD8E6&#x27;, &#x27;orange&#x27;: &#x27;#FF9800&#x27;, &#x27;purple&#x27;: &#x27;#9C27B0&#x27;}"}, {"fullname": "causal_nest.result.get_node_style", "modulename": "causal_nest.result", "qualname": "get_node_style", "kind": "function", "doc": "<p>Determines the style of a node based on the estimate value and refutation results.</p>\n\n<p>Args:\n    estimate_value (int): The estimated value of the node.\n    refutations (List[EstimationResult]): A list of refutation results.</p>\n\n<p>Returns:\n    Dict[str, str]: A dictionary containing the style attributes for the node.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">estimate_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">refutations</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">estimation_result</span><span class=\"o\">.</span><span class=\"n\">EstimationResult</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.result.generate_result_graph", "modulename": "causal_nest.result", "qualname": "generate_result_graph", "kind": "function", "doc": "<p>Generates a result graph based on the discovery result and problem instance.</p>\n\n<p>Args:\n    dr (DiscoveryResult): The discovery result containing the causal graph.\n    problem (Problem): The problem instance containing the dataset.\n    layout_option (str, optional): The layout option for the graph visualization. Defaults to None.</p>\n\n<p>Returns:\n    Any: The generated graph object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dr</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">discovery_result</span><span class=\"o\">.</span><span class=\"n\">DiscoveryResult</span>,</span><span class=\"param\">\t<span class=\"n\">problem</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">Problem</span>,</span><span class=\"param\">\t<span class=\"n\">layout_option</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.result.generate_all_results", "modulename": "causal_nest.result", "qualname": "generate_all_results", "kind": "function", "doc": "<p>Generates a result graph based on the discovery result and problem instance.</p>\n\n<p>Args:\n    dr (DiscoveryResult): The discovery result containing the causal graph.\n    problem (Problem): The problem instance containing the dataset.\n    layout_option (str, optional): The layout option for the graph visualization. Defaults to None.</p>\n\n<p>Returns:\n    Any: The generated graph object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">problem</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">Problem</span>, </span><span class=\"param\"><span class=\"n\">layout_option</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.results", "modulename": "causal_nest.results", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.results.discovery_result", "modulename": "causal_nest.results.discovery_result", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.results.discovery_result.DiscoveryResult", "modulename": "causal_nest.results.discovery_result", "qualname": "DiscoveryResult", "kind": "class", "doc": "<p>Class to store and display the results of a causal discovery process.</p>\n\n<p>Attributes:\n    output_graph (nx.DiGraph): The directed graph representing the discovered causal structure.\n    model (str): The name of the model used for discovery.\n    auc_pr (Optional[float]): The Area Under the Precision-Recall Curve (AUC-PR) score.\n    shd (Optional[int]): The Structural Hamming Distance (SHD) score.\n    sid (Optional[int]): The Structural Intervention Distance (SID) score.\n    runtime (Optional[float]): The runtime of the discovery process in seconds.\n    priority_score (float): The priority score of the discovery result.\n    knowledge_integrity_score (Optional[float]): The knowledge integrity score.\n    forbidden_edges_violation_rate (Optional[float]): The rate of forbidden edges violations.\n    required_edges_compliance_rate (Optional[float]): The rate of required edges compliance.</p>\n"}, {"fullname": "causal_nest.results.discovery_result.DiscoveryResult.__init__", "modulename": "causal_nest.results.discovery_result", "qualname": "DiscoveryResult.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">output_graph</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auc_pr</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">shd</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sid</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">runtime</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">priority_score</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">knowledge_integrity_score</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">forbidden_edges_violation_rate</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">required_edges_compliance_rate</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "causal_nest.results.discovery_result.DiscoveryResult.output_graph", "modulename": "causal_nest.results.discovery_result", "qualname": "DiscoveryResult.output_graph", "kind": "variable", "doc": "<p></p>\n", "annotation": ": networkx.classes.digraph.DiGraph", "default_value": "None"}, {"fullname": "causal_nest.results.discovery_result.DiscoveryResult.model", "modulename": "causal_nest.results.discovery_result", "qualname": "DiscoveryResult.model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "causal_nest.results.discovery_result.DiscoveryResult.auc_pr", "modulename": "causal_nest.results.discovery_result", "qualname": "DiscoveryResult.auc_pr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": "None"}, {"fullname": "causal_nest.results.discovery_result.DiscoveryResult.shd", "modulename": "causal_nest.results.discovery_result", "qualname": "DiscoveryResult.shd", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": "None"}, {"fullname": "causal_nest.results.discovery_result.DiscoveryResult.sid", "modulename": "causal_nest.results.discovery_result", "qualname": "DiscoveryResult.sid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": "None"}, {"fullname": "causal_nest.results.discovery_result.DiscoveryResult.runtime", "modulename": "causal_nest.results.discovery_result", "qualname": "DiscoveryResult.runtime", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": "None"}, {"fullname": "causal_nest.results.discovery_result.DiscoveryResult.priority_score", "modulename": "causal_nest.results.discovery_result", "qualname": "DiscoveryResult.priority_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0"}, {"fullname": "causal_nest.results.discovery_result.DiscoveryResult.knowledge_integrity_score", "modulename": "causal_nest.results.discovery_result", "qualname": "DiscoveryResult.knowledge_integrity_score", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": "None"}, {"fullname": "causal_nest.results.discovery_result.DiscoveryResult.forbidden_edges_violation_rate", "modulename": "causal_nest.results.discovery_result", "qualname": "DiscoveryResult.forbidden_edges_violation_rate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": "None"}, {"fullname": "causal_nest.results.discovery_result.DiscoveryResult.required_edges_compliance_rate", "modulename": "causal_nest.results.discovery_result", "qualname": "DiscoveryResult.required_edges_compliance_rate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": "None"}, {"fullname": "causal_nest.results.discovery_result.DiscoveryResult.print", "modulename": "causal_nest.results.discovery_result", "qualname": "DiscoveryResult.print", "kind": "function", "doc": "<p>Prints the discovery result statistics in a formatted manner.</p>\n\n<p>This method prints various statistics related to the discovery result, including runtime,\nAUC-PR, SHD, SID, priority score, knowledge integrity score, forbidden edges violation rate,\nand required edges compliance rate.</p>\n\n<p>Returns:\n    str: An empty string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.results.estimation_result", "modulename": "causal_nest.results.estimation_result", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.results.estimation_result.EstimationResult", "modulename": "causal_nest.results.estimation_result", "qualname": "EstimationResult", "kind": "class", "doc": "<p>Class to store and display the results of a causal estimation process.</p>\n\n<p>This class is designed to encapsulate the results of a causal estimation process, providing\na structured way to store and access various attributes related to the estimation. It is\nintended to be used in causal inference workflows where the results of an estimation need\nto be passed around, stored, or analyzed further.</p>\n\n<p>Attributes:\n    model (Optional[str]): The name of the model used for estimation.\n    treatment (Optional[str]): The treatment variable in the causal model.\n    estimand (Optional[Any]): The estimand, which is the quantity being estimated.\n    estimate (Optional[Any]): The estimated value of the estimand.\n    control_value (Optional[Any]): The value of the control group.\n    treatment_value (Optional[Any]): The value of the treatment group.\n    p_value (Optional[Any]): The p-value associated with the estimate.</p>\n"}, {"fullname": "causal_nest.results.estimation_result.EstimationResult.__init__", "modulename": "causal_nest.results.estimation_result", "qualname": "EstimationResult.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">treatment</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">estimand</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">estimate</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">control_value</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">treatment_value</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">p_value</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "causal_nest.results.estimation_result.EstimationResult.model", "modulename": "causal_nest.results.estimation_result", "qualname": "EstimationResult.model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "causal_nest.results.estimation_result.EstimationResult.treatment", "modulename": "causal_nest.results.estimation_result", "qualname": "EstimationResult.treatment", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "causal_nest.results.estimation_result.EstimationResult.estimand", "modulename": "causal_nest.results.estimation_result", "qualname": "EstimationResult.estimand", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]", "default_value": "None"}, {"fullname": "causal_nest.results.estimation_result.EstimationResult.estimate", "modulename": "causal_nest.results.estimation_result", "qualname": "EstimationResult.estimate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]", "default_value": "None"}, {"fullname": "causal_nest.results.estimation_result.EstimationResult.control_value", "modulename": "causal_nest.results.estimation_result", "qualname": "EstimationResult.control_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]", "default_value": "None"}, {"fullname": "causal_nest.results.estimation_result.EstimationResult.treatment_value", "modulename": "causal_nest.results.estimation_result", "qualname": "EstimationResult.treatment_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]", "default_value": "None"}, {"fullname": "causal_nest.results.estimation_result.EstimationResult.p_value", "modulename": "causal_nest.results.estimation_result", "qualname": "EstimationResult.p_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]", "default_value": "None"}, {"fullname": "causal_nest.results.refutation_result", "modulename": "causal_nest.results.refutation_result", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.results.refutation_result.RefutationResult", "modulename": "causal_nest.results.refutation_result", "qualname": "RefutationResult", "kind": "class", "doc": "<p>Class to store and display the results of a causal refutation process.</p>\n\n<p>This class is designed to encapsulate the results of a causal refutation process, providing\na structured way to store and access various attributes related to the refutation. It is\nintended to be used in causal inference workflows where the results of a refutation need\nto be passed around, stored, or analyzed further.</p>\n\n<p>Attributes:\n    treatment (str): The treatment variable in the causal model.\n    estimated_effect (float): The estimated effect of the treatment.\n    p_value (float): The p-value associated with the refutation.\n    new_effect (float): The new effect estimated after refutation.\n    model (Optional[str]): The name of the model used for refutation.\n    runtime (Optional[float]): The runtime of the refutation process in seconds.\n    passed (bool): Indicates whether the refutation passed based on the p-value.</p>\n"}, {"fullname": "causal_nest.results.refutation_result.RefutationResult.__init__", "modulename": "causal_nest.results.refutation_result", "qualname": "RefutationResult.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">treatment</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">p_value</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">estimated_effect</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">new_effect</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">passed</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "causal_nest.results.refutation_result.RefutationResult.treatment", "modulename": "causal_nest.results.refutation_result", "qualname": "RefutationResult.treatment", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "causal_nest.results.refutation_result.RefutationResult.estimated_effect", "modulename": "causal_nest.results.refutation_result", "qualname": "RefutationResult.estimated_effect", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "causal_nest.results.refutation_result.RefutationResult.p_value", "modulename": "causal_nest.results.refutation_result", "qualname": "RefutationResult.p_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "causal_nest.results.refutation_result.RefutationResult.new_effect", "modulename": "causal_nest.results.refutation_result", "qualname": "RefutationResult.new_effect", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "causal_nest.results.refutation_result.RefutationResult.model", "modulename": "causal_nest.results.refutation_result", "qualname": "RefutationResult.model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "causal_nest.results.refutation_result.RefutationResult.runtime", "modulename": "causal_nest.results.refutation_result", "qualname": "RefutationResult.runtime", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": "None"}, {"fullname": "causal_nest.results.refutation_result.RefutationResult.passed", "modulename": "causal_nest.results.refutation_result", "qualname": "RefutationResult.passed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "causal_nest.stats", "modulename": "causal_nest.stats", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.stats.calculate_auc_pr", "modulename": "causal_nest.stats", "qualname": "calculate_auc_pr", "kind": "function", "doc": "<p>Calculates the Area Under the Precision-Recall Curve (AUC-PR) between two graphs.</p>\n\n<p>Args:\n    graph_1 (DiGraph): The first directed graph.\n    graph_2 (DiGraph): The second directed graph.</p>\n\n<p>Returns:\n    float: The AUC-PR value.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph_1</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span>,</span><span class=\"param\">\t<span class=\"n\">graph_2</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.stats.calculate_shd", "modulename": "causal_nest.stats", "qualname": "calculate_shd", "kind": "function", "doc": "<p>Calculates the Structural Hamming Distance (SHD) between two graphs.</p>\n\n<p>Args:\n    graph_1 (DiGraph): The first directed graph.\n    graph_2 (DiGraph): The second directed graph.</p>\n\n<p>Returns:\n    float: The SHD value.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph_1</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span>,</span><span class=\"param\">\t<span class=\"n\">graph_2</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.stats.calculate_sid", "modulename": "causal_nest.stats", "qualname": "calculate_sid", "kind": "function", "doc": "<p>Calculates the Structural Intervention Distance (SID) between two graphs.</p>\n\n<p>Args:\n    graph_1 (DiGraph): The first directed graph.\n    graph_2 (DiGraph): The second directed graph.</p>\n\n<p>Returns:\n    float: The SID value.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph_1</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span>,</span><span class=\"param\">\t<span class=\"n\">graph_2</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.stats.calculate_graph_ranking_score", "modulename": "causal_nest.stats", "qualname": "calculate_graph_ranking_score", "kind": "function", "doc": "<p>Calculates a ranking score for the graph based on various metrics.</p>\n\n<p>Args:\n    graph (nx.DiGraph): The directed graph to evaluate.\n    target (str): The target node in the graph.</p>\n\n<p>Returns:\n    float: The calculated ranking score.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span>, </span><span class=\"param\"><span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.stats.forbidden_edges_violation_rate", "modulename": "causal_nest.stats", "qualname": "forbidden_edges_violation_rate", "kind": "function", "doc": "<p>Calculates the rate of forbidden edges violations in the graph.</p>\n\n<p>Args:\n    graph (nx.DiGraph): The directed graph to evaluate.\n    knowledge (Knowledge): The knowledge instance containing forbidden edges.</p>\n\n<p>Returns:\n    float: The rate of forbidden edges violations.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span>,</span><span class=\"param\">\t<span class=\"n\">knowledge</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">Knowledge</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.stats.required_edges_compliance_rate", "modulename": "causal_nest.stats", "qualname": "required_edges_compliance_rate", "kind": "function", "doc": "<p>Calculates the compliance rate of required edges in the graph.</p>\n\n<p>Args:\n    graph (nx.DiGraph): The directed graph to evaluate.\n    knowledge (Knowledge): The knowledge instance containing required edges.</p>\n\n<p>Returns:\n    float: The compliance rate of required edges.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span>,</span><span class=\"param\">\t<span class=\"n\">knowledge</span><span class=\"p\">:</span> <span class=\"n\">causal_nest</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">Knowledge</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.stats.graph_integrity_score", "modulename": "causal_nest.stats", "qualname": "graph_integrity_score", "kind": "function", "doc": "<p>Calculates the integrity score of the graph based on violation and compliance rates.</p>\n\n<p>Args:\n    violation_rate (float): The rate of forbidden edges violations.\n    compliance_rate (float): The compliance rate of required edges.</p>\n\n<p>Returns:\n    float: The calculated integrity score.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">violation_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">compliance_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.utils", "modulename": "causal_nest.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "causal_nest.utils.graph_to_pydot_string", "modulename": "causal_nest.utils", "qualname": "graph_to_pydot_string", "kind": "function", "doc": "<p>Converts a NetworkX directed graph to a Pydot string representation.</p>\n\n<p>This function takes a NetworkX directed graph and converts it to a string representation\nin the Pydot format, which can be used for visualization or further processing.</p>\n\n<p>Args:\n    graph (nx.DiGraph): The NetworkX directed graph to convert.</p>\n\n<p>Returns:\n    str: The Pydot string representation of the graph.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.utils.dagify_graph", "modulename": "causal_nest.utils", "qualname": "dagify_graph", "kind": "function", "doc": "<p>Input a graph and output a DAG.</p>\n\n<p>The heuristic is to reverse the edge with the lowest score of the cycle\nif possible, else remove it.</p>\n\n<p>Args:\n    g (networkx.DiGraph): Graph to modify to output a DAG</p>\n\n<p>Returns:\n    networkx.DiGraph: DAG made out of the input graph.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">g</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span></span><span class=\"return-annotation\">) -> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span>:</span></span>", "funcdef": "def"}, {"fullname": "causal_nest.utils.dagify_graph_v2", "modulename": "causal_nest.utils", "qualname": "dagify_graph_v2", "kind": "function", "doc": "<p>Input a graph and output a DAG while handling cycles involving a target node.</p>\n\n<p>The function modifies the graph to output a DAG. If a cycle contains an edge\nX -> Y where Y is the target_node, it preserves this edge. If edges are not\noriented and one of the nodes in it is the target_node, it orients it as X -> target_node.</p>\n\n<p>Args:\n    g (networkx.DiGraph): Graph to modify to output a DAG.\n    target_node: The node that should be treated specially in cycle handling.</p>\n\n<p>Returns:\n    networkx.DiGraph: DAG made out of the input graph.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">g</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span>,</span><span class=\"param\">\t<span class=\"n\">target_node</span></span><span class=\"return-annotation\">) -> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">digraph</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();