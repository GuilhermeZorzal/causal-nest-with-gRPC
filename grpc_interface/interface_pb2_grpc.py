# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import interface_pb2 as interface__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in interface_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SerializerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.handle_missing_data_grpc = channel.unary_unary(
                '/SerializerService/handle_missing_data_grpc',
                request_serializer=interface__pb2.MissingDataRequest.SerializeToString,
                response_deserializer=interface__pb2.DatasetResponse.FromString,
                _registered_method=True)
        self.applyable_models_grpc = channel.unary_unary(
                '/SerializerService/applyable_models_grpc',
                request_serializer=interface__pb2.ProblemRequest.SerializeToString,
                response_deserializer=interface__pb2.ModelsResponse.FromString,
                _registered_method=True)
        self.discover_with_all_models_grpc = channel.unary_unary(
                '/SerializerService/discover_with_all_models_grpc',
                request_serializer=interface__pb2.DiscoverWithAllModelsRequest.SerializeToString,
                response_deserializer=interface__pb2.ProblemResponse.FromString,
                _registered_method=True)
        self.estimate_all_effects_grpc = channel.unary_unary(
                '/SerializerService/estimate_all_effects_grpc',
                request_serializer=interface__pb2.EstimateAllEffectsRequest.SerializeToString,
                response_deserializer=interface__pb2.ProblemResponse.FromString,
                _registered_method=True)
        self.refute_all_results_grpc = channel.unary_unary(
                '/SerializerService/refute_all_results_grpc',
                request_serializer=interface__pb2.RefuteAllResultsRequest.SerializeToString,
                response_deserializer=interface__pb2.ProblemResponse.FromString,
                _registered_method=True)
        self.generate_all_results_grpc = channel.unary_unary(
                '/SerializerService/generate_all_results_grpc',
                request_serializer=interface__pb2.GenerateAllResultsRequest.SerializeToString,
                response_deserializer=interface__pb2.GraphStringResponse.FromString,
                _registered_method=True)


class SerializerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def handle_missing_data_grpc(self, request, context):
        """Datasets
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyable_models_grpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def discover_with_all_models_grpc(self, request, context):
        """Discovery
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def estimate_all_effects_grpc(self, request, context):
        """Estimation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def refute_all_results_grpc(self, request, context):
        """Refutation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def generate_all_results_grpc(self, request, context):
        """Results
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SerializerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'handle_missing_data_grpc': grpc.unary_unary_rpc_method_handler(
                    servicer.handle_missing_data_grpc,
                    request_deserializer=interface__pb2.MissingDataRequest.FromString,
                    response_serializer=interface__pb2.DatasetResponse.SerializeToString,
            ),
            'applyable_models_grpc': grpc.unary_unary_rpc_method_handler(
                    servicer.applyable_models_grpc,
                    request_deserializer=interface__pb2.ProblemRequest.FromString,
                    response_serializer=interface__pb2.ModelsResponse.SerializeToString,
            ),
            'discover_with_all_models_grpc': grpc.unary_unary_rpc_method_handler(
                    servicer.discover_with_all_models_grpc,
                    request_deserializer=interface__pb2.DiscoverWithAllModelsRequest.FromString,
                    response_serializer=interface__pb2.ProblemResponse.SerializeToString,
            ),
            'estimate_all_effects_grpc': grpc.unary_unary_rpc_method_handler(
                    servicer.estimate_all_effects_grpc,
                    request_deserializer=interface__pb2.EstimateAllEffectsRequest.FromString,
                    response_serializer=interface__pb2.ProblemResponse.SerializeToString,
            ),
            'refute_all_results_grpc': grpc.unary_unary_rpc_method_handler(
                    servicer.refute_all_results_grpc,
                    request_deserializer=interface__pb2.RefuteAllResultsRequest.FromString,
                    response_serializer=interface__pb2.ProblemResponse.SerializeToString,
            ),
            'generate_all_results_grpc': grpc.unary_unary_rpc_method_handler(
                    servicer.generate_all_results_grpc,
                    request_deserializer=interface__pb2.GenerateAllResultsRequest.FromString,
                    response_serializer=interface__pb2.GraphStringResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SerializerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('SerializerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SerializerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def handle_missing_data_grpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SerializerService/handle_missing_data_grpc',
            interface__pb2.MissingDataRequest.SerializeToString,
            interface__pb2.DatasetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def applyable_models_grpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SerializerService/applyable_models_grpc',
            interface__pb2.ProblemRequest.SerializeToString,
            interface__pb2.ModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def discover_with_all_models_grpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SerializerService/discover_with_all_models_grpc',
            interface__pb2.DiscoverWithAllModelsRequest.SerializeToString,
            interface__pb2.ProblemResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def estimate_all_effects_grpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SerializerService/estimate_all_effects_grpc',
            interface__pb2.EstimateAllEffectsRequest.SerializeToString,
            interface__pb2.ProblemResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def refute_all_results_grpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SerializerService/refute_all_results_grpc',
            interface__pb2.RefuteAllResultsRequest.SerializeToString,
            interface__pb2.ProblemResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def generate_all_results_grpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SerializerService/generate_all_results_grpc',
            interface__pb2.GenerateAllResultsRequest.SerializeToString,
            interface__pb2.GraphStringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
